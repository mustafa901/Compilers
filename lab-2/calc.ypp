%{
    #include <iostream>
    #include <cmath> 

    int yylex();
    void yyerror(const char *p) { std::cerr << "Error!" << std::endl; }

    extern FILE* yyin;
%}

%union{
    double num;
}

%token <num> T_NUM
%token T_PLUS T_MINUS T_DIV T_MUL T_LPAREN T_RPAREN T_SEMI T_POW T_ABS
%token T_SIN T_COS T_TAN T_PI

%type <num> stmt expr factor term abs_expr

%%

stmts   :
        ;

stmt    : expr T_SEMI
        {
            std::cout << "Result: " << $1 << std::endl;
        }
        ;

expr    : expr T_PLUS factor
        {
            $$ = $1 + $3;
        }
        | expr T_MINUS factor
        {
            $$ = $1 - $3;
        }
        | factor
        {
            $$ = $1;
        }
        ;

factor  : factor T_MUL term
        {
            $$ = $1 * $3;
        }
        | factor T_DIV term
        {
            if ($3 == 0) {
                yyerror("Division by zero");
                exit(1);
            }
            $$ = $1 / $3;
        }
        | term
        {
            $$ = $1;
        }
        ;

term    : term T_POW abs_expr
        {
            $$ = pow($1, $3); 
        }
        | abs_expr
        {
            $$ = $1;
        }
        ;

abs_expr : T_ABS expr T_ABS
        {
            $$ = fabs($2); 
        }
        | T_SIN T_LPAREN expr T_RPAREN
        {
            $$ = sin($3); 
        }
        | T_COS T_LPAREN expr T_RPAREN
        {
            $$ = cos($3);
        }
        | T_TAN T_LPAREN expr T_RPAREN
        {
            $$ = tan($3);
        }
        | T_LPAREN expr T_RPAREN
        {
            $$ = $2;
        }
        | T_PI
        {
            $$ = M_PI; 
        }
        | T_MINUS T_NUM
        {
            $$ = -$2;
        }
        | T_NUM
        {
            $$ = $1;
        }
        ;

%%

int main(int argc, char* argv[]){
    if(argc > 1){
        yyin = fopen(argv[1], "r");
    }

    yyparse();

    if(yyin != stdin) {
        fclose(yyin);
    }
    
    return 0;
}